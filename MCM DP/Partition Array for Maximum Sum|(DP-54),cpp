//Memoization
int solveit(int i,vector<int>&arr,int k,vector<int>&dp){
    if(i>=arr.size()){
        return 0 ;
    }
    int maxi=INT_MIN ;
    int max_num=arr[i] ;

    if(dp[i]!=-1){
        return dp[i] ;
    }

    for(int p=1;p<=k && i+p<=arr.size();p++){
        max_num=max(max_num,arr[i+p-1]) ;
        //cout<<max_num<<endl  ;
        int ans=p*max_num+solveit(i+p,arr,k,dp) ;
        cout<<ans<<endl ;
        maxi=max(maxi,ans) ;
    }

    return dp[i]=maxi ;
}



//Tabulation
class Solution {
public:
    int maxSumAfterPartitioning(vector<int>& arr, int k) {
        int n=arr.size() ;
        vector<int>dp(n+1,0) ;
        for(int i=n-1;i>=0;i--){
            int max_num=arr[i] ;
            int maxi=INT_MIN ;

            for(int p=1;p<=k && i+p<=arr.size();p++){
                max_num=max(max_num,arr[i+p-1]) ;

                int ans=p*max_num+dp[i+p] ;

                dp[i]=max(dp[i],ans) ;
            }
        }
        return dp[0] ;
    }
};
