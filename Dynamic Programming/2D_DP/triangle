//dp - memoization...will start from 0th index in this case
class Solution {
public:
    int solveit(vector<vector<int>>& triangle, int i,int j,vector<vector<int>>& dp){
        if(i==triangle.size()-1){
            return triangle[i][j] ;
        }
        if(dp[i][j]!=-1){
            return dp[i][j] ;
        }
        //int below=2147483647,right=2147483647;
        int below=triangle[i][j]+solveit(triangle,i+1,j,dp) ;
        if(i+1<triangle.size() && j+1<triangle[i+1].size()){
            //cout<<"XX"<<endl ;
            int right=triangle[i][j]+solveit(triangle,i+1,j+1,dp) ;
            return dp[i][j]=min(below,right) ;
        }
        


        //cout<<dp[i][j]<<endl ;
        return dp[i][j]=below ;
        
    }
    int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size() ;
        vector<vector<int>>dp(n,vector<int>(n,-1)) ;
        return solveit(triangle,0,0,dp) ;
    }
};





//dp-itreation...will start by filling (n-1)th positions first....(we have started from 0 in memoization ...so will start from n-1 in itreation)
int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size() ;
        vector<vector<int>>dp(n,vector<int>(n,-1)) ;
        for(int i=0;i<n;i++){
            dp[n-1][i]=triangle[n-1][i] ;
        }
        for(int i=n-2;i>=0;i--){
            for(int j=0;j<triangle[i].size();j++){
                int below=triangle[i][j]+dp[i+1][j] ;
                if(j+1<triangle[i+1].size()){
                    int right=triangle[i][j]+dp[i+1][j+1] ;
                    dp[i][j]=min(below,right) ;
                }
                else{
                    dp[i][j]=below ;
                }
            }
        }
        return dp[0][0] ;
    }
    
    
    


//space otimized
int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size() ;
        //vector<vector<int>>dp(n,vector<int>(n,-1)) ;
        vector<int>prev(n) ;
        for(int i=0;i<n;i++){
            prev[i]=triangle[n-1][i] ;
        }
        for(int i=n-2;i>=0;i--){
            vector<int>curr(triangle[i].size()) ;
            for(int j=0;j<triangle[i].size();j++){
                int below=triangle[i][j]+prev[j] ;
                if(j+1<triangle[i+1].size()){
                    int right=triangle[i][j]+prev[j+1] ;
                    curr[j]=min(below,right) ;
                }
                else{
                    curr[j]=below ;
                }
            }
            prev=curr ;
        }
        return prev[0] ;
    }
    
    
