//obstacle ache shudhu extra


//dp memoization
class Solution {
public:
    int solveit(vector<vector<int>>& obstacleGrid,int i,int j,vector<vector<int>>&dp){
        
        if(i==-1 || j==-1 || obstacleGrid[i][j]==1){
            return 0;
        }
        if(i==0 && j==0){
            return 1 ;
        }
        if(dp[i][j]!=-1){
            return dp[i][j] ;
        }
        int left=solveit(obstacleGrid,i-1,j,dp) ;
        int up=solveit(obstacleGrid,i,j-1,dp) ;

        return dp[i][j]=left+up ;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n=obstacleGrid.size() ;
        int m=obstacleGrid[0].size() ;

        //cout<<n<<" "<<m<<endl ;

        vector<vector<int>>dp(n,vector<int>(m,-1)) ;

        return solveit(obstacleGrid,n-1,m-1,dp) ;
    }
};


//Tabulization
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n=obstacleGrid.size() ;
        int m=obstacleGrid[0].size() ;

        vector<vector<int>>dp(n,vector<int>(m,0));

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                
                if(obstacleGrid[i][j]==1){
                    dp[i][j]=0 ;
                }
                else if(i==0 && j==0 ){
                    dp[i][j]=1 ;
                }

                else{
                    int left=0,up=0 ;
                    if(i-1>=0){
                        left=dp[i-1][j] ;
                    }
                    if(j-1>=0){
                        up=dp[i][j-1];
                    }

                    dp[i][j]=left+up ;
                }
            }
        }

        return dp[n-1][m-1] ;
    }





//space otimized 0(m)
int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n=obstacleGrid.size() ;
        int m=obstacleGrid[0].size() ;

        vector<vector<int>>dp(n,vector<int>(m,0));
        vector<int>prev(m,0) ;

        for(int i=0;i<n;i++){
            vector<int>cur(n,0) ;
            for(int j=0;j<m;j++){
                
                if(obstacleGrid[i][j]==1){
                    cur[j]=0 ;
                }
                else if(i==0 && j==0 ){
                    cur[j]=1 ;  
                }

                else{
                    int left=0,up=0 ;
                    if(i-1>=0){
                        left=prev[j] ;
                    }
                    if(j-1>=0){
                        up=cur[j-1];
                    }

                    cur[j]=left+up ;
                }
            }
            prev=cur ;
        }

        return prev[m-1] ;
    }
};
