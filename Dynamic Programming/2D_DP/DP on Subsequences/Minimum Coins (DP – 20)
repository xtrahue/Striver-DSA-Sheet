//memoization
class Solution {
public:
    int solveit(vector<int>&coins,int ind,int amount,vector<vector<int>>&dp){
        if(ind==0){
            if(amount%coins[0]==0){
                return amount/coins[0] ;
            }
            return 1e9 ;
        }
        if(dp[ind][amount]!=-1){
            return dp[ind][amount] ;
        }

        int notTake=solveit(coins,ind-1,amount,dp) ;
        int take=1e9 ;
        if(coins[ind]<=amount){
            take=1 +solveit(coins,ind,amount-coins[ind],dp) ;
        }

        return dp[ind][amount]=min(take,notTake) ;
    }
    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size() ;
        vector<vector<int>>dp(n,vector<int>(amount+1,-1)) ;
        int ans=solveit(coins,n-1,amount,dp) ;
        if(ans>=1e9){
            return -1 ;
        }
        else{
            return ans ;
        }
    }
};



//tabulization
int coinChange(vector<int>& coins, int amount) {
    int n=coins.size() ;
    vector<vector<int>>dp(n,vector<int>(amount+1,0)) ;

    for(int amt=0;amt<=amount;amt++){
        if(amt%coins[0]==0){
            dp[0][amt]=amt/coins[0] ;
        }
        else{
            dp[0][amt]=1e9 ;
        }
    }

    for(int i=1;i<n;i++){
        for(int amt=0;amt<=amount;amt++){
            int notTake = dp[i-1][amt] ;
            int take = 1e9 ;
            if(coins[i]<=amt){
                take=1+dp[i][amt-coins[i]] ;
            }

            dp[i][amt]=min(take,notTake) ;
        }
    }

    if(dp[n-1][amount]>=1e9){
        return -1 ;
    }
    else{
        return dp[n-1][amount] ;
    }
}




//space optimized
int coinChange(vector<int>& coins, int amount) {
    int n=coins.size() ;
    //vector<vector<int>>dp(n,vector<int>(amount+1,0)) ;
    vector<int>prev(amount+1,0) ;
    vector<int>curr(amount+1,0) ;

    for(int amt=0;amt<=amount;amt++){
        if(amt%coins[0]==0){
            prev[amt]=amt/coins[0] ;
        }
        else{
            prev[amt]=1e9 ;
        }
    }

    for(int i=1;i<n;i++){
        for(int amt=0;amt<=amount;amt++){
            int notTake = prev[amt] ;
            int take = 1e9 ;
            if(coins[i]<=amt){
                take=1+curr[amt-coins[i]] ;
            }

            curr[amt]=min(take,notTake) ;
        }
        prev=curr ;
    }

    if(prev[amount]>=1e9){
        return -1 ;
    }
    else{
        return prev[amount] ;
    }
}
