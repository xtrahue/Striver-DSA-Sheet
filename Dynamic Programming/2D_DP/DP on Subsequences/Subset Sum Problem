//recursive



//dp-->memoization...2D dp here also
bool solveit(vector<int>&arr,int sum,int i,vector<vector<int>>&dp){
        if(sum==0){
            return 1;
        }
        if(i==0){
            if(arr[0]==sum){
                return 1 ;
            }
            else{
                return 0 ;
            }
        }
        if(dp[i][sum]!=-1){
            if(dp[i][sum]==1){
                return 1;
            }
            else{
                return 0 ;
            }
        }
        bool not_take=solveit(arr,sum,i-1,dp) ;
        bool take=0 ;
        if(sum>=arr[i]){
            take=solveit(arr,sum-arr[i],i-1,dp) ;
        }
        
        return dp[i][sum]=(take|| not_take) ;
    }
    
    
    
//dp-->itreation
bool isSubsetSum(vector<int>arr, int sum){
        // code here
        int n=arr.size() ;
        
        vector<vector<bool>>dp(n,vector<bool>(sum+1,0)) ;
        dp[0][arr[0]]=1 ;
        for(int i=0;i<n;i++){
            dp[i][0]=1 ;
        }
        
        for(int i=1;i<n;i++){
            for(int tar=1;tar<=sum;tar++){
                bool not_take=dp[i-1][tar] ;
                bool take=0 ;
                if(tar>=arr[i]){
                    take=dp[i-1][tar-arr[i]] ;
                }
                
                dp[i][tar]=(take|| not_take) ;
            }
        }
        
        return dp[n-1][sum] ;
        
    }
    
    
    
    
    
    
//space optimization
bool isSubsetSum(vector<int>arr, int sum){
        // code here
        int n=arr.size() ;
        
        
        vector<int>prev(sum+1,0) ;
        prev[arr[0]]=1 ;
        prev[0]=1 ;
        
        for(int i=1;i<n;i++){
            vector<int>curr(sum+1,0) ;
            curr[0]=1 ;
            for(int tar=1;tar<=sum;tar++){
                bool not_take=prev[tar] ;
                bool take=0 ;
                if(tar>=arr[i]){
                    take=prev[tar-arr[i]] ;
                }
                
                curr[tar]=(take|| not_take) ;
            }
            prev=curr ;
        }
        
        return prev[sum] ;
        
    }



