//Recursion
int solveit(int i,int j1,int j2,vector<vector<int>> &grid,int n,int m){
        if(j1>=m || j1<0 || j2>=m || j2<0){
            return 0;
        }
        if(i==0){
            if(j1==j2){
                return grid[i][j1] ;
            }
            return grid[i][j1]+grid[i][j2] ;
        }
        int maxi=-1e8 ;
        for(int p=-1;p<=1;p++){
            for(int q=-1;q<=1;q++){
                if(j1==j2){
                    maxi=max(maxi,grid[i][j1]+solveit(i-1,j1+p,j2+q,grid,n,m)) ;
                }
                else{
                    maxi=max(maxi,grid[i][j1]+grid[i][j2]+solveit(i-1,j1+p,j2+q,grid,n,m)) ;
                }
                
            }
        }

        return maxi ;

    }
    
    
    
    //dp->memoization
    int solveit(int i,int j1,int j2,vector<vector<int>> &grid,int n,int m,vector<vector<vector<int>>>&dp){
        if(j1>=m || j1<0 || j2>=m || j2<0){
            return -1e8;
        }
        if(i==n-1){
            if(j1==j2){
                return grid[i][j1] ;
            }
            return grid[i][j1]+grid[i][j2] ;
        }
        if(dp[i][j1][j2]!=-1){
            return dp[i][j1][j2] ;
        }
        int maxi=-1e8 ;
        for(int p=-1;p<=1;p++){
            for(int q=-1;q<=1;q++){
                int temp;
                if(j1==j2){
                    temp=grid[i][j1]+solveit(i+1,j1+p,j2+q,grid,n,m,dp) ;
                }
                else{
                    temp=grid[i][j1]+grid[i][j2]+solveit(i+1,j1+p,j2+q,grid,n,m,dp) ;
                }
                
                maxi=max(maxi,temp) ;
            }
        }
        

        return dp[i][j1][j2]=maxi ;

    }
    
    
    
    
    
    //dp-->itreation
    int solve(int n, int m, vector<vector<int>>& grid) {
        // code here
        vector<vector<vector<int>>>dp(n,vector<vector<int>>(m,vector<int>(m,-1))) ;
        for(int i=n-1;i>=0;i--){
            for(int j1=0;j1<m;j1++){
                for(int j2=0;j2<m;j2++){
                    if(i==n-1){
                        if(j1==j2){
                            dp[i][j1][j2]=grid[i][j1] ;
                        }
                        else{
                            dp[i][j1][j2]=grid[i][j1]+grid[i][j2] ;
                        }
                    }
                    else{
                        int maxi=-1e8 ;
                        for(int p=-1;p<=1;p++){
                            for(int q=-1;q<=1;q++){
                                int temp=0;
                                if(j1==j2){
                                    temp=grid[i][j1];
                                }
                                else{
                                    temp=grid[i][j1]+grid[i][j2] ;
                                }
                                if(j1+p<m && j1+p>=0 && j2+q<m && j2+m>=0){
                                    temp+=dp[i+1][j1+p][j2+q] ;
                                }
                                else{
                                    temp+=(-1e8) ;
                                }
                                
                                maxi=max(maxi,temp) ;
                            }
                        }
                        dp[i][j1][j2]=maxi ;
                    }
                }
            }
        }
        return dp[0][0][m-1] ;
    }



//dp->space optimization
