//dp->memoization
class Solution {
public:
    int solveit(vector<vector<int>> &matrix,int i,int j,int n,vector<vector<int>>&dp){
        if(i==0){
            return matrix[i][j] ;
        }
        int left=1e8,right=1e8,up=1e8 ;
        if(dp[i][j]!=-1){
            return dp[i][j] ;
        }

        if(j-1>=0){
            left=matrix[i][j]+solveit(matrix,i-1,j-1,n,dp) ;
        }
        if(j+1<n){
            right=matrix[i][j]+solveit(matrix,i-1,j+1,n,dp) ;
        }
        up=matrix[i][j]+solveit(matrix,i-1,j,n,dp) ;

        return dp[i][j]=min(left,min(right,up)) ;
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int maxi=1e8 ;
        int n = matrix.size() ;
        
        vector<vector<int>> dp(n,vector<int>(n,-1)) ;
        
        for(int i=0;i<n;i++){
            maxi=min(maxi,solveit(matrix,n-1,i,n,dp)) ;
        }

        return maxi ;
    }
};





//dp->iteration
int minFallingPathSum(vector<vector<int>>& matrix) {
        int maxi=1e8 ;
        int n = matrix.size() ;

        vector<vector<int>> dp(n,vector<int>(n,-1)) ;
        
        for(int i=0;i<n;i++){
            dp[0][i]=matrix[0][i] ;
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<n;j++){
                int left=1e8,right=1e8,up=1e8 ;
                if(j-1>=0){
                    left=matrix[i][j]+dp[i-1][j-1] ;
                }
                if(j+1<n){
                    right=matrix[i][j]+dp[i-1][j+1] ;
                }
                up=matrix[i][j]+dp[i-1][j] ;

                dp[i][j]=min(left,min(right,up)) ;
            }
        }

        int mini=1e8 ;
        for(int i=0;i<n;i++){
            mini=min(dp[n-1][i],mini) ;
        }

        return mini ;
    }




//space optimization
int minFallingPathSum(vector<vector<int>>& matrix) {
        int maxi=1e8 ;
        int n = matrix.size() ;

        vector<vector<int>> dp(n,vector<int>(n,-1)) ;
        vector<int>prev(n) ;
        
        for(int i=0;i<n;i++){
            prev[i]=matrix[0][i] ;
        }
        for(int i=1;i<n;i++){
            vector<int>curr(n) ;
            for(int j=0;j<n;j++){
                int left=1e8,right=1e8,up=1e8 ;
                if(j-1>=0){
                    left=matrix[i][j]+prev[j-1] ;
                }
                if(j+1<n){
                    right=matrix[i][j]+prev[j+1] ;
                }
                up=matrix[i][j]+prev[j] ;

                curr[j]=min(left,min(right,up)) ;
            }
            prev=curr ;
        }

        int mini=1e8 ;
        for(int i=0;i<n;i++){
            mini=min(prev[i],mini) ;
        }

        return mini ;
    }
