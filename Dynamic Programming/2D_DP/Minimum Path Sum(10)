//memoization
#include<bits/stdc++.h>
class Solution {
public:
    int solveit(vector<vector<int>>& grid,int i,int j, vector<vector<int>> &dp){
        if(i==0 && j==0){
            return grid[0][0] ;
        }
        if(dp[i][j]!=-1){
            return dp[i][j] ;
        }
        int left= 2147483647;
        int right=2147483647 ;
        if(i-1>=0){
            left=grid[i][j]+solveit(grid,i-1,j,dp) ;
        }

        if(j-1>=0){
            right=grid[i][j]+solveit(grid,i,j-1,dp) ;
        }

        return dp[i][j]=min(left,right) ;
        
    }
    int minPathSum(vector<vector<int>>& grid) {
        
        int n=grid.size() ;
        int m=grid[0].size() ;

        vector<vector<int>>dp(n,vector<int>(m,-1)) ;
        return solveit(grid,n-1,m-1,dp)  ;
    }
};



//tabulation
  int minPathSum(vector<vector<int>>& grid) {
        
        int n=grid.size() ;
        int m=grid[0].size() ;

        vector<vector<int>>dp(n,vector<int>(m,-1)) ;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0 && j==0){
                    dp[i][j]=grid[i][j] ;
                }
                else{
                    int left= 2147483647;
                    int right=2147483647 ;

                    if(i-1>=0){
                        left=grid[i][j]+dp[i-1][j] ;
                    }

                    if(j-1>=0){
                        right=grid[i][j]+dp[i][j-1] ;
                    }

                    dp[i][j]=min(left,right) ;
                }
            }
        }
        return dp[n-1][m-1] ;
    }
    
    
    
    
    //space optimization
    int minPathSum(vector<vector<int>>& grid) {
        
        int n=grid.size() ;
        int m=grid[0].size() ;

        vector<int>prev(m,0) ;

        for(int i=0;i<n;i++){

            vector<int>cur(m,0) ;

            for(int j=0;j<m;j++){

                if(i==0 && j==0){
                    cur[j]=grid[i][j] ;
                }
                else{
                    int left= 2147483647;
                    int right=2147483647 ;

                    if(i-1>=0){
                        right=grid[i][j]+prev[j] ;
                    }

                    if(j-1>=0){
                        left=grid[i][j]+cur[j-1] ;
                    }

                    cur[j]=min(left,right) ;
                }
            }
            prev=cur ;
        }
        return prev[m-1] ;
    }
