
//memoization 
int solveit(int n,vector<vector<int>> &points,int pre, vector<vector<int>>&dp){
        if(n==0){
            int maxi=0 ;
            for(int i=0;i<3;i++){
                if(i!=pre){
                    maxi=max(points[0][i],maxi) ;
                }
            }
            return maxi ;
        }
        if(dp[n][pre]!=-1){
            return dp[n][pre] ;
        }
        int maxi = 0;
        for(int i=0;i<3;i++){
            int point=0 ;
            if(i!=pre){
                point=points[n][i]+solveit(n-1,points,i,dp) ;
            }
            maxi=max(maxi,point) ;
            //dp[n][i]=maxi;
        }
        
        return dp[n][pre]=maxi;
    }
    
    
    //Tabulation
    public:
    int solveit(int n,vector<vector<int>> &points, vector<vector<int>>&dp){
        
        dp[0][0]=max(points[0][1],points[0][2]) ;
        dp[0][1]=max(points[0][0],points[0][2]) ;
        dp[0][2]=max(points[0][1],points[0][0]) ;
        dp[0][3]=max(points[0][1],max(points[0][2],points[0][0])) ;
        
        for(int i=1;i<n;i++){
            for(int last=0;last<4;last++){
                int maxi=0 ;
                for(int j=0;j<3;j++){
                    int point = 0 ;
                    if(last!=j){
                        point = points[i][j]+dp[i-1][j] ;
                    }
                    
                    maxi=max(maxi,point) ;
                    
                }
                dp[i][last]=maxi ;
            }
        }
        
        return dp[n-1][3] ;
    }
    int maximumPoints(vector<vector<int>>& points, int n) {
        // Code here
        int maxi=0 ;
        vector<vector<int>> dp(n,vector<int>(4,-1)) ;
        return solveit(n,points,dp) ;
    }
