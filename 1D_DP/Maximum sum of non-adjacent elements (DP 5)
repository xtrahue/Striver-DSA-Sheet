//Memoization
class Solution{
public:	
    int solveit(int ind,int n,int *nums,vector<int>&dp){
        if(ind>=n){
            return 0;
        }
        if(dp[ind]!=-1){
            return dp[ind] ;
        }
        int left=INT_MIN,right=INT_MIN ;
    
            left=solveit(ind+2,n,nums,dp)+nums[ind] ;
            right=solveit(ind+1,n,nums,dp) ;
        
        return dp[ind]=max(left,right) ;
    }
	// calculate the maximum sum with out adjacent
	int findMaxSum(int *nums, int n) {
	    // code here
	    vector<int>dp(n,-1) ;
        return solveit(0,n,nums,dp) ;
	}
};


//Tabulation
class Solution{
public:	
    int solveit(int ind,int n,int *nums,vector<int>&dp){
        dp[0]=nums[0] ;
        for(int i=1;i<n;i++){
            int left=INT_MIN ;
            int right=INT_MIN ;
            
            left=dp[i-1] ;
            right=nums[i] ;
            if(i-2>=0){
                right+=dp[i-2] ;
            }
            dp[i]=max(left,right) ;
        }
        
        return dp[n-1] ;
    }
	// calculate the maximum sum with out adjacent
	int findMaxSum(int *nums, int n) {
	    // code here
	    vector<int>dp(n,-1) ;
        return solveit(0,n,nums,dp) ;
	}
};


//space optimized
class Solution{
public:	
    
	// calculate the maximum sum with out adjacent
	int findMaxSum(int *nums, int n) {
	    // code here
	    int prev=nums[0] ;
        int prev2 ;
        for(int i=1;i<n;i++){
            int left=INT_MIN ;
            int right=INT_MIN ;
            
            left=prev ;
            right=nums[i] ;
            if(i-2>=0){
                right+=prev2;
            }
            prev2=prev ;
            prev=max(left,right) ;
        }
        
        return prev ;
	}
};
