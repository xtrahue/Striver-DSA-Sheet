class Solution{
    public:
    void solveit(int row,int col,vector<vector<int>> &m, int n,string s,vector<vector<bool>>&vis,vector<string>&ans){
        if(row==n-1 && col==n-1){
            ans.push_back(s) ;
            return ;
        }
        
        //right
        if(col+1<n && m[row][col+1]==1 && vis[row][col+1]==0){
            vis[row][col]=1 ;
            solveit(row,col+1,m,n,s+'R',vis,ans) ;
            vis[row][col]=0 ;
        }
        
        //down
        if(row+1<n && m[row+1][col]==1 && vis[row+1][col]==0){
            vis[row][col]=1 ;
            solveit(row+1,col,m,n,s+'D',vis,ans) ;
            vis[row][col]=0 ;
        }
        
        //up
        if(row-1>=0 && m[row-1][col]==1 && vis[row-1][col]==0){
            vis[row][col]=1 ;
            solveit(row-1,col,m,n,s+'U',vis,ans) ;
            vis[row][col]=0 ;
        }
        
        //left
        if(col-1>=0 && m[row][col-1]==1 && vis[row][col-1]==0){
            vis[row][col]=1 ;
            solveit(row,col-1,m,n,s+'L',vis,ans) ;
            vis[row][col]=0 ;
        }
        
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vector<string>ans ;
        string s="" ;
        vector<vector<bool>>vis(n,vector<bool>(n,0)) ;
        if(m[0][0]){
            solveit(0,0,m,n,s,vis,ans) ;
        }
        
        sort(ans.begin(),ans.end()) ;
        
        return ans;
    }
};
