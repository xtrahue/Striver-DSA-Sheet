class Solution {
private:
    vector<int>A ={4,3,2,1} ; //{100,75,50,25} divided by 25
    vector<int>B={0,1,2,3} ;
    double solveit(int a, int b, vector<vector<double>>&dp) {
        if (a <= 0 && b <= 0) {
            return 0.5;
        }
        if (a <= 0) {
            return 1.0;
        }
        if (b <= 0) {
            return 0.0;
        }

        if(dp[a][b]!=-1){
            return dp[a][b] ;
        }

        double res=0 ;
        for(int i=0;i<4;i++){
            int a_rem = a- A[i] ;
            int b_rem = b - B[i] ;

            res= res+0.25*solveit(a_rem,b_rem,dp) ;
        }

        return dp[a][b]=res ;
        
    }
public:
    double soupServings(int n) {
        if (n > 4451) {
            return 1.0;
        }
        n = (n + 24) / 25;
        vector<vector<double>>dp(n+1,vector<double>(n+1,-1)) ;

        return solveit(n, n, dp);
    }
};
